#+STARTUP: overview
* Package Management
** Package Server
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/")
             '("gnu" . "https://elpa.gnu.org/packages/"))
(package-initialize)
#+END_SRC
** Use-package
#+BEGIN_SRC emacs-lisp
;; Install use-package if not installed
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (setq use-package-always-ensure t)
  (setq use-package-expand-minimally t)
  (setq use-package-compute-statistics t)
  (setq use-package-enable-imenu-support t))

(eval-when-compile
  (require 'use-package)
  (require 'bind-key))
#+END_SRC

** Try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC
* Window Management
** Popwin
#+BEGIN_SRC emacs-lisp
(use-package popwin)
(popwin-mode 1)
#+END_SRC
** Ace-Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+END_SRC
* Navigation
** Swiper
#+BEGIN_SRC emacs-lisp
;; Counsel is a requirement for swiper
(use-package counsel)

(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "C-x C-f") 'counsel-fzf)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-rg)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
#+END_SRC
* Interface Tweaks
** General
#+BEGIN_SRC emacs-lisp
;; Disable something when startup
(setq inhibit-startup-message t)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

;; Disable backupfile
(setq make-backup-files nil)

;; Ask to type yes or no -> y or n
(fset 'yes-or-no-p 'y-or-n-p)

;; Set F5 to revert-buffer
(global-set-key (kbd "<f5>") 'revert-buffer)

;; Ido flex-matching
(setq indo-enable-flex-matching t
      ido-everywhere t)
(ido-mode 1)

;; Enable ibuffer
(defalias  'list-buffers 'ibuffer-other-window)

;; Display time
(setq display-time-day-and-date t
      display-time-format "%m/%d %a. %H:%M"
      display-time-default-load-average nil)
(display-time-mode 1)

;; Display battery status
(display-battery-mode 1)

;; Display line numbers
;; (setq display-line-numbers 'relative)
(global-display-line-numbers-mode 1)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC
** Page-break-lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :diminish
  :init (global-page-break-lines-mode))
#+END_SRC
* Text Editing
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil)
(evil-mode 1)

(use-package key-chord)

;; Enter normal mode by pressing jj and jk to C-o in vim
(setq key-chord-two-keys-delay 0.1)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-define evil-insert-state-map "jk" 'evil-execute-in-normal-state)
(key-chord-mode 1)
#+END_SRC
** Evil-easymotion
#+BEGIN_SRC emacs-lisp
(use-package evil-easymotion)
(evilem-default-keybindings "SPC")
#+END_SRC
** Undo-Fu
#+BEGIN_SRC emacs-lisp
;; For the evil undo (Emacs version < 28)
(use-package undo-fu)
(define-key evil-normal-state-map "u" 'undo-fu-only-undo)
(define-key evil-normal-state-map "\C-r" 'undo-fu-only-redo)
#+END_SRC
* General Programming
** Indention
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
  :ensure smartparens
  :config
  (progn
    (show-smartparens-global-mode t)))
(smartparens-global-mode t)

(define-key smartparens-mode-map (kbd "C-c u") 'sp-unwrap-sexp)
(define-key smartparens-mode-map (kbd "C-c r") 'sp-rewrap-sexp)
(define-key smartparens-mode-map (kbd "C-c <right>") 'sp-forward-slurp-sexp)
(define-key smartparens-mode-map (kbd "C-c <left>") 'sp-backward-slurp-sexp)

(defun my-sp-pair-function (id action context)
  (if (eq action 'insert)
    ;; t to pair, nil to not pair
    (or (looking-at "[[:space:][:punct:]]")
      (sp-point-before-eol-p id action context))
      t))

(with-eval-after-load 'smartparens
  (sp-pair "(" ")" :when '(my-sp-pair-function) :wrap "C-c )")
  (sp-pair "{" "}" :when '(my-sp-pair-function) :wrap "C-c }")
  (sp-pair "[" "]" :when '(my-sp-pair-function) :wrap "C-c ]")
  (sp-pair "[" "]" :when '(my-sp-pair-function) :wrap "C-c ]")
  (sp-pair "\"" "\"" :when '(my-sp-pair-function) :wrap "C-c \"")
  (sp-pair "'" "'" :when '(my-sp-pair-function) :wrap "C-c '"))
#+END_SRC
** Highlight-Numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers)
(add-hook 'prog-mode-hook 'highlight-numbers-mode)
#+END_SRC
** Prettify Symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode 1)
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols.  See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(("lambda" . 955)
	  ("!=" . 8800)
          ("<=" . 8804)
          (">=" . 8805))))
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+END_SRC
** Format-All
#+BEGIN_SRC emacs-lisp
(use-package format-all
  :bind ("C-c C-f" . format-all-buffer))
#+END_SRC
* Auto Complete
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :diminish
  :hook (after-init . global-flycheck-mode)
  :commands (flycheck-add-mode)
  :custom
  (flycheck-global-modes
   '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
  (flycheck-emacs-lisp-load-path 'inherit)
  (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
  :init
  (if (display-graphic-p)
      (use-package flycheck-posframe
        :custom-face
        (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
        (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
        :hook (flycheck-mode . flycheck-posframe-mode)
        :custom
        (flycheck-posframe-position 'window-bottom-left-corner)
        (flycheck-posframe-border-width 3)
        (flycheck-posframe-inhibit-functions
         '((lambda (&rest _) (bound-and-true-p company-backend)))))
    (use-package flycheck-pos-tip
      :defines flycheck-pos-tip-timeout
      :hook (flycheck-mode . flycheck-pos-tip-mode)
      :custom (flycheck-pos-tip-timeout 30)))
  :config
  (use-package flycheck-popup-tip
    :hook (flycheck-mode . flycheck-popup-tip-mode))
  (when (fboundp 'define-fringe-bitmap)
    (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
      [16 48 112 240 112 48 16] nil nil 'center))
  (when (executable-find "vale")
    (use-package flycheck-vale
      :config
      (flycheck-vale-setup)
      (flycheck-add-mode 'vale 'latex-mode))))
#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
;; Need at least aspell version 0.60.9 to enable --camel-case option
;; in ispell-extra-args
(use-package flyspell
  :ensure nil
  :diminish
  :if (executable-find "aspell")
  :hook (((text-mode outline-mode latex-mode org-mode markdown-mode) . flyspell-mode))
  :custom
  (flyspell-issue-message-flag nil)
  (ispell-program-name "aspell")
  (ispell-extra-args
   '("--sug-mode=ultra" "--lang=en_US"))
  :config
  (use-package flyspell-correct-ivy
    :after ivy
    :bind
    (:map flyspell-mode-map
          ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper)
          ("C-." . flyspell-correct-wrapper))
    :custom (flyspell-correct-interface #'flyspell-correct-ivy)))
#+END_SRC
** LSP
*** LSP Mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :defer t
  :commands lsp
  :custom
  (lsp-auto-guess-root nil)
  (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
  (lsp-file-watch-threshold 2000)
  (read-process-output-max (* 1024 1024))
  (lsp-eldoc-hook nil)
  :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
  :hook ((python-mode rustic-mode
          c-mode) . lsp))
#+END_SRC
*** LSP UI
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :diminish
  :commands lsp-ui-mode
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
  :bind
  (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu)
        ("M-i" . lsp-ui-doc-focus-frame))
  (:map lsp-mode-map
        ("M-n" . forward-paragraph)
        ("M-p" . backward-paragraph))
  :custom
  (lsp-ui-doc-header t)
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-sideline-enable nil)
  (lsp-ui-sideline-ignore-duplicate t)
  (lsp-ui-sideline-show-code-actions nil)
  :config
  ;; Use lsp-ui-doc-webkit only in GUI
  (if (display-graphic-p)
      (setq lsp-ui-doc-use-webkit t))
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil)))
#+END_SRC
** YASnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :init
  (use-package yasnippet-snippets :after yasnippet)
  :hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
  :bind
  (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
  (:map yas-keymap
        (("TAB" . smarter-yas-expand-next-field)
         ([(tab)] . smarter-yas-expand-next-field)))
  :config
  (yas-reload-all)
  (defun smarter-yas-expand-next-field ()
    "Try to `yas-expand' then `yas-next-field' at current cursor position."
    (interactive)
    (let ((old-point (point))
          (old-tick (buffer-chars-modified-tick)))
      (yas-expand)
      (when (and (eq old-point (point))
                 (eq old-tick (buffer-chars-modified-tick)))
        (ignore-errors (yas-next-field))))))
#+END_SRC
** Company
*** Company-mode
#+BEGIN_SRC emacs-lisp
(defconst clangd-p
  (or (executable-find "clangd")  ;; usually
      (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
  "Do we have clangd?")

(use-package company
  :diminish company-mode
  :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
  :bind
  (:map company-active-map
        ([tab] . smarter-tab-to-complete)
        ("TAB" . smarter-tab-to-complete))
  :custom
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-require-match 'never)
  ;; Don't use company in the following modes
  (company-global-modes '(not shell-mode eaf-mode))
  ;; Trigger completion immediately.
  (company-idle-delay 0.1)
  ;; Number the candidates (use M-1, M-2 etc to select completions).
  (company-show-numbers t)
  :config
  (unless clangd-p (delete 'company-clang company-backends))
  (global-company-mode 1)
  (defun smarter-tab-to-complete ()
    "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.

If all failed, try to complete the common part with `company-complete-common'"
    (interactive)
    (when yas-minor-mode
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick))
            (func-list
             (if (equal major-mode 'org-mode) '(org-cycle yas-expand yas-next-field)
               '(yas-expand yas-next-field))))
        (catch 'func-suceed
          (dolist (func func-list)
            (ignore-errors (call-interactively func))
            (unless (and (eq old-point (point))
                         (eq old-tick (buffer-chars-modified-tick)))
              (throw 'func-suceed t)))
          (company-complete-common))))))
#+END_SRC
*** Company-box
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :diminish
  :if (display-graphic-p)
  :defines company-box-icons-all-the-icons
  :hook (company-mode . company-box-mode)
  :custom
  (company-box-backends-colors nil)
  :config
  (with-no-warnings
    ;; Prettify icons
    (defun my-company-box-icons--elisp (candidate)
      (when (derived-mode-p 'emacs-lisp-mode)
        (let ((sym (intern candidate)))
          (cond ((fboundp sym) 'Function)
                ((featurep sym) 'Module)
                ((facep sym) 'Color)
                ((boundp sym) 'Variable)
                ((symbolp sym) 'Text)
                (t . nil)))))
    (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp))

  (when (and (display-graphic-p)
             (require 'all-the-icons nil t))
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.8 :v-adjust -0.15))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.02))
            (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.02 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.85 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.02))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.8 :v-adjust -0.15))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.8 :v-adjust -0.15))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.8 :v-adjust -0.15))
            (Color . ,(all-the-icons-material "palette" :height 0.8 :v-adjust -0.15))
            (File . ,(all-the-icons-faicon "file-o" :height 0.8 :v-adjust -0.02))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.8 :v-adjust -0.15))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.8 :v-adjust -0.02))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.8 :v-adjust -0.15))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.8 :v-adjust -0.1))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.8 :v-adjust -0.15 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-octicon "zap" :height 0.8 :v-adjust 0 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.8 :v-adjust -0.15))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.02))
            (Template . ,(all-the-icons-material "format_align_left" :height 0.8 :v-adjust -0.15)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
#+END_SRC
* Org
** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets)
(add-hook 'org-mode-hook 
  (lambda () 
    (org-bullets-mode 1)))
#+END_SRC
    
** Org Emphasis
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)                            
(setq org-emphasis-alist   
(quote (("*" bold)
  ("/" (:foreground "Red"))
  ("_" underline)
  ("=" (:foreground "Black" :background "Yellow"))
  ("~" org-verbatim verbatim)
  ("+"
  (:strike-through t)))))
#+END_SRC
* Customize Face
** Theme
#+BEGIN_SRC emacs-lisp
(use-package monokai-theme)
(load-theme 'monokai t)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon)
(beacon-mode 1)
#+END_SRC
** All-The-Icon
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC
** Ivy-Rich
#+BEGIN_SRC emacs-lisp
(use-package ivy-rich)
(ivy-rich-mode 1)
(setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
#+END_SRC
* Git
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind(("\C-x g" . magit-status)))
#+END_SRC
** Git-gutter+
#+BEGIN_SRC emacs-lisp
(use-package git-gutter+
  :init (global-git-gutter+-mode)
  :config (progn
            (define-key git-gutter+-mode-map (kbd "C-x n") 'git-gutter+-next-hunk)
            (define-key git-gutter+-mode-map (kbd "C-x p") 'git-gutter+-previous-hunk)
            (define-key git-gutter+-mode-map (kbd "C-x v =") 'git-gutter+-show-hunk)
            (define-key git-gutter+-mode-map (kbd "C-x r") 'git-gutter+-revert-hunks)
            (define-key git-gutter+-mode-map (kbd "C-x t") 'git-gutter+-stage-hunks)
            (define-key git-gutter+-mode-map (kbd "C-x c") 'git-gutter+-commit)
            (define-key git-gutter+-mode-map (kbd "C-x C") 'git-gutter+-stage-and-commit)
            (define-key git-gutter+-mode-map (kbd "C-x C-y") 'git-gutter+-stage-and-commit-whole-buffer)
            (define-key git-gutter+-mode-map (kbd "C-x U") 'git-gutter+-unstage-whole-buffer))
  :diminish (git-gutter+-mode . "gg"))

(setq git-gutter+-window-width 2
      git-gutter+-modified-sign " "
      git-gutter+-added-sign " "
      git-gutter+-deleted-sign " ")
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind
  ("C-c p" . projectile-command-map)
  :custom
  (projectile-completion-system 'ivy)
  :config
  (projectile-mode 1))
#+END_SRC
* File Manager
** Neotree
#+BEGIN_SRC emacs-lisp
(use-package neotree)
(global-set-key [f8] 'neotree-toggle)

(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
(add-hook 'neotree-mode-hook
          (lambda ()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "r") 'neotree-rename-node)
            (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
            (define-key evil-normal-state-local-map (kbd "n") 'neotree-create-node)
            (define-key evil-normal-state-local-map (kbd "f") 'neotree-find)
            (define-key evil-normal-state-local-map (kbd "h") 'neotree-hidden-file-toggle)
            (define-key evil-normal-state-local-map (kbd "<f5>") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
#+END_SRC
* Doom Mode Line
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
  :foreground "gray85"
  :background "dark slate blue"
  :box nil)
(setcar mode-line-position
  '(:eval (format "%3d%%" (/ (window-start) 0.01 (point-max)))))
	
(use-package doom-modeline
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  (doom-modeline-icon t)
  (doom-modeline-modal-icon nil)
  (doom-modeline-hud t)
  (doom-modeline-major-mode-color-icon t)
  (doom-modeline-height 25)
  :config
  (doom-modeline-mode))

;; Display column numbers in modeline
(column-number-mode 1) 

;; Customize face
(set-face-attribute 'doom-modeline-bar nil
  :background "#FF5600")
#+END_SRC
* Language
** Rust
*** Rust-Mode
#+BEGIN_SRC emacs-lisp
(use-package rust-mode)
;; Always space indent
(add-hook 'rust-mode-hook
          (lambda () (setq indent-tabs-mode nil)))

;; Auto formating on save
(setq rust-format-on-save t)
#+END_SRC
*** Cargo
#+BEGIN_SRC emacs-lisp
(use-package cargo)
(add-hook 'rust-mode-hook 'cargo-minor-mode)
#+END_SRC
*** Rustic
#+BEGIN_SRC emacs-lisp
(use-package rustic)
;; Rust-Analyzer auto complete only works on cargo project "main" file...
;; Using rls for auto complete temporarily
(setq rustic-lsp-server 'rls)
#+END_SRC
** Python
#+BEGIN_SRC emacs-lisp
#+END_SRC
** C
*** CC-Mode
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :bind (:map c-mode-base-map
         ("C-c c" . compile))
  :hook (c-mode-common . (lambda ()
                            (c-set-style "k&r")
                            (setq tab-width 4)
                            (setq c-base-offset 4))))
#+END_SRC
*** CCLS
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :custom
  (ccls-executable "/usr/local/bin/ccls")
  (ccls-sem-highlight-method 'font-lock)
  :config
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC
*** Company-C-Headers
#+BEGIN_SRC emacs-lisp
(use-package company-c-headers)
(add-to-list 'company-backends 'company-c-headers)
#+END_SRC
* Miscellaneous
** Restart-Emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC
